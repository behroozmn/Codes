####################################################################################################################
##################################### استفاده از تابع درون تابع دیگر به روش سنتی ###################################
##############################3#####################################################################################
from random import choice

print("#############")
print("### سنتی  ###")
print("#############")


def state():
    def get_state():
        msg = choice(('Good', 'Bad!', 'Fine'))
        return msg

    return get_state()


print(f"-----> {state()}")
print("\n")
print("#######################################")
print("### سنتی ###### بنوان مقدار بازگشتی ###")
print("#######################################")


def state():
    def get_state():
        msg = choice(('Good', 'Bad!', 'Fine'))
        return msg

    return get_state


result = state()
print("=====> ", result())
print("\n")
print("#######################################")
print("### سنتی ###### بنوان آرگومان ورودی ###")
print("#######################################")


def sum_func(number, func):
    total = 0
    for num in range(1, number + 1):
        total += func(num)
    return total


def square_func(number):
    return number * number


print("☰☰☰☰☰> ", sum_func(5, square_func))

##########################################################################################
####################### استفاده از تابع درون تابع دیگر به روش جدید #######################
####################################### Decorator ########################################
##########################################################################################
#    # ۱)تکنیک Decorator یک DesignePatternاست که یک تابع را درون تابع دیگر فراخوانی میکنیم
#                   # ۲)امکان تغییر یا گسترش رفتار یک تابع یا کلاس بدون تغییر در کد اصلی آن
#                                                   # ۳)معمولاً به صورت یک تابع تعریف می‌شوند
#          # ۴)یک تابع دیگر را بعنوان آرگومان ورودی می‌پذیرند و یک تابع جدید را برمی‌گردانند
#          # ۵)این تابع جدید می‌تواند قبل یا بعد از اجرای تابع اصلی، کارهای اضافی انجام دهد
#                                   # ۵)معمولا همراه با کاراکتر @ در بالای توابع ظاهر می‌شوند
##########################################################################################
print("\n#########################")
print("### Decorate: Example ###")
print("#########################")


def exec_after_before(func):
    def wrapper():
        print("Before")
        func()
        print("After")

    return wrapper


@exec_after_before
def say_hello():
    print("Hi")


say_hello()
